	.file	"ordering.cpp"
	.intel_syntax noprefix
	.text
	.align 2
	.p2align 4,,15
	.globl	_ZN15MersenneTwister7integerEv
	.type	_ZN15MersenneTwister7integerEv, @function
_ZN15MersenneTwister7integerEv:
.LFB28:
	.cfi_startproc
	movsx	rax, DWORD PTR [rdi+2496]
	mov	edx, 0
	lea	ecx, [rax+1]
	lea	esi, [rax+397]
	mov	r8d, DWORD PTR [rdi+rax*4]
	mov	r9, rax
	cmp	ecx, 624
	cmovge	ecx, edx
	lea	edx, [rax-227]
	cmp	esi, 624
	mov	DWORD PTR [rdi+2496], ecx
	cmovge	esi, edx
	movsx	rdx, ecx
	and	r8d, -2147483648
	mov	edx, DWORD PTR [rdi+rdx*4]
	movsx	rsi, esi
	and	edx, 2147483647
	or	edx, r8d
	mov	eax, edx
	shr	edx
	and	eax, 1
	imul	eax, eax, -1727483681
	xor	eax, edx
	xor	eax, DWORD PTR [rdi+rsi*4]
	mov	edx, eax
	mov	DWORD PTR [rdi+r9*4], eax
	shr	edx, 11
	xor	edx, eax
	mov	eax, edx
	sal	eax, 7
	and	eax, -1658038656
	xor	eax, edx
	mov	edx, eax
	sal	edx, 15
	and	edx, -272236544
	xor	edx, eax
	mov	eax, edx
	shr	eax, 18
	xor	eax, edx
	ret
	.cfi_endproc
.LFE28:
	.size	_ZN15MersenneTwister7integerEv, .-_ZN15MersenneTwister7integerEv
	.align 2
	.p2align 4,,15
	.globl	_ZN15MersenneTwisterC2Ej
	.type	_ZN15MersenneTwisterC2Ej, @function
_ZN15MersenneTwisterC2Ej:
.LFB26:
	.cfi_startproc
	push	rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	xor	eax, eax
	mov	rbp, rdi
	push	rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	.p2align 4,,10
	.p2align 3
.L6:
	mov	DWORD PTR [rbp+0+rax], esi
	add	rax, 4
	cmp	rax, 2496
	jne	.L6
	mov	DWORD PTR [rbp+2496], 0
	mov	ebx, 62400
	.p2align 4,,10
	.p2align 3
.L7:
	mov	rdi, rbp
	call	_ZN15MersenneTwister7integerEv
	sub	ebx, 1
	jne	.L7
	pop	rbx
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE26:
	.size	_ZN15MersenneTwisterC2Ej, .-_ZN15MersenneTwisterC2Ej
	.globl	_ZN15MersenneTwisterC1Ej
	.set	_ZN15MersenneTwisterC1Ej,_ZN15MersenneTwisterC2Ej
	.p2align 4,,15
	.globl	_Z11thread2FuncPv
	.type	_Z11thread2FuncPv, @function
_Z11thread2FuncPv:
.LFB30:
	.cfi_startproc
	sub	rsp, 2520
	.cfi_def_cfa_offset 2528
	mov	esi, 2
	mov	rdi, rsp
	call	_ZN15MersenneTwisterC1Ej
	.p2align 4,,10
	.p2align 3
.L14:
	mov	edi, OFFSET FLAT:beginSema2
	call	sem_wait
	.p2align 4,,10
	.p2align 3
.L13:
	mov	rdi, rsp
	call	_ZN15MersenneTwister7integerEv
	test	al, 7
	jne	.L13
	mov	DWORD PTR Y[rip], 1
#APP
# 110 "ordering.cpp" 1
	mfence
# 0 "" 2
#NO_APP
	mov	eax, DWORD PTR X[rip]
	mov	edi, OFFSET FLAT:endSema
	mov	DWORD PTR r2[rip], eax
	call	sem_post
	jmp	.L14
	.cfi_endproc
.LFE30:
	.size	_Z11thread2FuncPv, .-_Z11thread2FuncPv
	.p2align 4,,15
	.globl	_Z11thread1FuncPv
	.type	_Z11thread1FuncPv, @function
_Z11thread1FuncPv:
.LFB29:
	.cfi_startproc
	sub	rsp, 2520
	.cfi_def_cfa_offset 2528
	mov	esi, 1
	mov	rdi, rsp
	call	_ZN15MersenneTwisterC1Ej
	.p2align 4,,10
	.p2align 3
.L19:
	mov	edi, OFFSET FLAT:beginSema1
	call	sem_wait
	.p2align 4,,10
	.p2align 3
.L18:
	mov	rdi, rsp
	call	_ZN15MersenneTwister7integerEv
	test	al, 7
	jne	.L18
	mov	DWORD PTR X[rip], 1
#APP
# 88 "ordering.cpp" 1
	mfence
# 0 "" 2
#NO_APP
	mov	eax, DWORD PTR Y[rip]
	mov	edi, OFFSET FLAT:endSema
	mov	DWORD PTR r1[rip], eax
	call	sem_post
	jmp	.L19
	.cfi_endproc
.LFE29:
	.size	_Z11thread1FuncPv, .-_Z11thread1FuncPv
	.section	.rodata.str1.8,"aMS",@progbits,1
	.align 8
.LC0:
	.string	"%d reorders detected after %d iterations\n"
	.section	.text.startup,"ax",@progbits
	.p2align 4,,15
	.globl	main
	.type	main, @function
main:
.LFB31:
	.cfi_startproc
	push	rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	xor	edx, edx
	xor	esi, esi
	mov	edi, OFFSET FLAT:beginSema1
	xor	ebp, ebp
	push	rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	mov	ebx, 1
	sub	rsp, 24
	.cfi_def_cfa_offset 48
	call	sem_init
	xor	edx, edx
	xor	esi, esi
	mov	edi, OFFSET FLAT:beginSema2
	call	sem_init
	xor	edx, edx
	xor	esi, esi
	mov	edi, OFFSET FLAT:endSema
	call	sem_init
	xor	ecx, ecx
	mov	edx, OFFSET FLAT:_Z11thread1FuncPv
	xor	esi, esi
	mov	rdi, rsp
	call	pthread_create
	lea	rdi, [rsp+8]
	xor	ecx, ecx
	mov	edx, OFFSET FLAT:_Z11thread2FuncPv
	xor	esi, esi
	call	pthread_create
	jmp	.L24
	.p2align 4,,10
	.p2align 3
.L23:
	add	ebx, 1
.L24:
	mov	edi, OFFSET FLAT:beginSema1
	mov	DWORD PTR X[rip], 0
	mov	DWORD PTR Y[rip], 0
	call	sem_post
	mov	edi, OFFSET FLAT:beginSema2
	call	sem_post
	mov	edi, OFFSET FLAT:endSema
	call	sem_wait
	mov	edi, OFFSET FLAT:endSema
	call	sem_wait
	mov	edx, DWORD PTR r1[rip]
	test	edx, edx
	jne	.L23
	mov	eax, DWORD PTR r2[rip]
	test	eax, eax
	jne	.L23
	add	ebp, 1
	mov	edx, ebx
	mov	edi, OFFSET FLAT:.LC0
	mov	esi, ebp
	xor	eax, eax
	call	printf
	jmp	.L23
	.cfi_endproc
.LFE31:
	.size	main, .-main
	.globl	r2
	.bss
	.align 4
	.type	r2, @object
	.size	r2, 4
r2:
	.zero	4
	.globl	r1
	.align 4
	.type	r1, @object
	.size	r1, 4
r1:
	.zero	4
	.globl	Y
	.align 4
	.type	Y, @object
	.size	Y, 4
Y:
	.zero	4
	.globl	X
	.align 4
	.type	X, @object
	.size	X, 4
X:
	.zero	4
	.globl	endSema
	.align 32
	.type	endSema, @object
	.size	endSema, 32
endSema:
	.zero	32
	.globl	beginSema2
	.align 32
	.type	beginSema2, @object
	.size	beginSema2, 32
beginSema2:
	.zero	32
	.globl	beginSema1
	.align 32
	.type	beginSema1, @object
	.size	beginSema1, 32
beginSema1:
	.zero	32
	.ident	"GCC: (Debian 4.7.2-5) 4.7.2"
	.section	.note.GNU-stack,"",@progbits
